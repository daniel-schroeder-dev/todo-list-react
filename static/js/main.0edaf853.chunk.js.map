{"version":3,"sources":["components/TodoForm/TodoForm.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","onSubmit","type","placeholder","value","todo","onChange","TodoItem","completed","className","onClick","onClickToggle","name","onClickRemove","TodoList","state","todos","handleCreateTodo","e","preventDefault","fetch","process","method","headers","body","JSON","stringify","then","response","json","newTodo","setState","prevState","map","push","catch","console","error","handleCreateTodoInput","target","handleDeleteTodo","_id","deletedTodo","filter","handleToggleTodo","find","completedTodo","this","key","bind","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0edaf853.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TodoForm.css';\n\nfunction TodoForm(props) {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <input type=\"text\" placeholder=\"Add a Todo\" value={props.todo} onChange={props.onChange} />\n    </form>\n  );\n}\n\nTodoForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  todo: PropTypes.string.isRequired,\n};\n\nexport default TodoForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TodoItem.css';\n\nfunction TodoItem(props) {\n\n  const completed = props.completed ? 'completed ' : '';\n\n  return (\n    <li className='todo-item'>\n      <span onClick={props.onClickToggle} className={completed}>{props.name}</span>\n      <span onClick={props.onClickRemove} className='todo-item__remove-icon'>&times;</span>\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onClickRemove: PropTypes.func.isRequired,\n  onClickToggle: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\n\nimport TodoForm from '../TodoForm/TodoForm';\nimport TodoItem from '../TodoItem/TodoItem';\n\nimport './TodoList.css';\n\nclass TodoList extends React.Component {\n\n  state = {\n    todos: [],\n    todo: '',\n  };\n\n  componentDidMount() {\n    fetch(process.env.REACT_APP_TODO_API_URL)\n      .then(response => response.json())\n      .then(todos => this.setState({ todos }))\n      .catch(console.error);\n  }\n\n  handleCreateTodo = e => {\n   \n    e.preventDefault();\n    const todo = this.state.todo;\n   \n    fetch(process.env.REACT_APP_TODO_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name: todo }),\n    })\n      .then(response => response.json())\n      .then(newTodo => {\n        this.setState(prevState => {\n          const todos = prevState.todos.map(todo => ({...todo}));\n          todos.push(newTodo);\n          return { todos };\n        });\n      })\n      .catch(console.error);\n\n    this.setState({ todo: '' });\n\n  };\n\n  handleCreateTodoInput = e => {\n    this.setState({ todo: e.target.value });\n  };\n\n  handleDeleteTodo = _id => {\n    fetch(`${process.env.REACT_APP_TODO_API_URL}/${_id}`, {\n      method: 'DELETE',\n    })\n      .then(response => response.json())\n      .then(deletedTodo => {\n        this.setState(prevState => {\n          const todos = prevState.todos\n            .map(todo => ({ ...todo }))\n            .filter(todo => todo._id !== deletedTodo._id);\n          return { todos };\n        });\n      })\n      .catch(console.error);\n  };\n\n  handleToggleTodo = _id => {\n    const todo = this.state.todos.find(todo => todo._id === _id);\n    fetch(`${process.env.REACT_APP_TODO_API_URL}/${_id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ completed: !todo.completed })\n    })\n      .then(response => response.json())\n      .then(completedTodo => {\n        this.setState(prevState => {\n          const todos = prevState.todos.map(todo => {\n            if (todo._id === completedTodo._id) return completedTodo;\n            return { ...todo };\n          });\n          return { todos };\n        });\n      })\n      .catch(console.error);\n  };\n\n  render() {\n\n    const todos = this.state.todos.map(todo => (\n      <TodoItem \n        key={todo._id} \n        name={todo.name} \n        completed={todo.completed}\n        onClickRemove={this.handleDeleteTodo.bind(this, todo._id)}\n        onClickToggle={this.handleToggleTodo.bind(this, todo._id)}\n      />\n    ));\n    \n    return (\n      <div>\n        <h1>TodoList</h1>\n        <TodoForm \n          onSubmit={this.handleCreateTodo} \n          onChange={this.handleCreateTodoInput}\n          todo={this.state.todo} \n        />\n        <ul>\n          {todos}\n        </ul>\n      </div>\n    );\n\n  } \n\n}\n\nexport default TodoList;\n","import React from 'react';\n\nimport TodoList from './components/TodoList/TodoList';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <main className=\"app\">\n      <TodoList />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}